todo
    compare timeouts with Seo's debounce

todo goal for weekend: playable thing
    call highlight & training wheels on/off option
        cool, works but:
            disable match/miss count when it's active
            set to false, user can select training
                this shows an alert and greys out matches
            any more advanced use of this needs to be paired with tutorial modal
                because: a) the code logic for both needs to be located together
                and b) it's confusing for the user if if starts with flashes
                    and then they go away
    compose some drone pitches in Ableton!
    look over those variable names, yipe. need to refactor before going any further.

    tutorial modal
        need a data structure for messaging
            so it needs more advanced leveling logic

    basic leveling system
        just get through major (and play it) a bunch
            before moving on to minor unlock, drone pitch variation, etc
            because: need to define advancement rhythm, code, test this whole concept


PONDERING
    timing: maybe have some sort of averaging system for playback time?
        like it averages the last x notes

    leveling: how do you really know when you've learned it?

    re: newLevelNoteMatches
        might want that to change for each note set.
            a case for a larger scale/level data structure?

    what happens if it plays a note, then you play the wrong note,
        then play right right note (before it responds?)
            previous timeout is cleared, new one set from the noteCalledTime
                got a problem with that?

REDUCE FILE SIZE
        move levelTracking to it's own file
        components for:
    review renders

DEV QUESTIONS
    store progress data with scale data?
    arrow vs non-arrow methods



TUTORIAL / NOTIFICATIONS
    (skip tutorial option)
    One note start - flash the button.
        Text indicates you to set the rhythm (test for rhythm?)
    Two notes
        First flash the buttons.
        Once a few are done, remove flash and show match and miss
            & Show 'training wheels' option
            Text re: only track matches w/o training wheels
    Unlock Minor 3rd


FEATURES
    modal overlay for level advance (display unlocked, stats, etc.)
    drone pitches in background
        turn-off-able
    match reset button
    more sophisticated leveling: steady tempo requirement, tempo minimums (how to do tempo averaging?)
    track timing average at level
    persistence
        once you got your data structure figured out...
    mode-switching options
    some way to track progress to next level
    display BPM as goes (tempo averaging?)
        use a dial rather than displaying a number
    flash starting pitch
        "training wheels" option
            always play root first; always flash first note
            flash every pitch (how to limit re:
            (how to limit re: advancement and scoring?)
    timing minimums

    ROOT NOTE SYSTEM
        this is how you manage expressions that go below the root
            without messing up/over-complicating the 13-note system
        play drone pitch in background
            & style on 'root' note with different background
        root starts on C, but can change
            after major scale is complete, root can go up the scale to outline modes
            after you've unlocked all those roots, the root will change randomly



LEVEL TRACK UNLOCKS
    Major   R ** M2 ** M3 ** P4 ** P5 ** M6 ** M7 ** 8v (Lydian & Myxolydian unlock at Major 8v)
                                   Minor m6    m7    8v (Dorian & Phrygian unlock at Minor 8v)
    ... this will have to come from experience
        maybe find some music profs to discuss


LATER ("Premium")
    advanced scales beyond diatonic
    scoop
    multi-note expressions
    match/miss splash
        different speed for apply/remove styles?
        other sorts of animations? confetti?

INSIGHTS
    direct instruction should be second to intuitive UI
        ideally, but then in this case it seems they need to be paired
            (to make use of the note splash thing)
    code should reflect how you use language to think about it
        have state reflect what is happening:
        "only update the matches if it's the first press of the correct note"
            set a counter for 'correctResponse' and only update matches if it's 1
        what I did was:
            when a new call happens, acceptMatchesUpdate === true
                it updates match/miss *count* if that's true
                on response then it's set to false
                so further responses match/miss counts are ignored
                    until the next call sets it true again

MISC DEBRIS
      responseReceivedTime: null,
      maxNoteCallWait: 5000,

            <select className="select-scale" onChange={() => {console.log('changing scale')}}>
              <option>Major</option><option>Minor</option>
            </select>
            <select>
              <option>2</option> <option>3</option> <option>4</option> <option>5</option> <option>6</option> <option>7</option> <option>8</option>
            </select>
